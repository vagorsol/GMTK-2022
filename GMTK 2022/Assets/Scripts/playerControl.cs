//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/playerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playerControl"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6bda474e-25b5-4d32-8bff-19432ff0d715"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c125e874-a600-4584-b822-170ef16fd536"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9377b6a7-e78b-4463-9f04-50b7dd626a58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PullSlotMachine"",
                    ""type"": ""Button"",
                    ""id"": ""02a20dbd-0590-4088-be8e-bd26ebba68d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""978bfe49-cc26-4a3d-ab7b-7d7a29327403"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""00ca640b-d935-4593-8157-c05846ea39b3"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d2581a9b-1d11-4566-b27d-b92aff5fabbc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2e46982e-44cc-431b-9f0b-c11910bf467a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fcfe95b8-67b9-4526-84b5-5d0bc98d6400"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""77bff152-3580-4b21-b6de-dcd0c7e41164"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1635d3fe-58b6-4ba9-a4e2-f4b964f6b5c8"",
                    ""path"": ""<XRController>/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ea4d645-4504-4529-b061-ab81934c3752"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8aa1aca7-59ad-493f-8146-e21f06982188"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65b7edf2-6efe-409a-8bbf-e4df62d8d74c"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PullSlotMachine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Phaser"",
            ""id"": ""12154692-ad6a-4eb0-a465-12a92f133a8f"",
            ""actions"": [
                {
                    ""name"": ""PhaseUp"",
                    ""type"": ""Button"",
                    ""id"": ""73f050d8-d73b-4125-85ae-68ac95ae3ed9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PhaseDown"",
                    ""type"": ""Button"",
                    ""id"": ""197d4d8e-93a3-4c3d-9668-1bc807409e4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PhaseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""63d0bcac-0c93-4352-b078-2260d1380a1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d85c2548-cc03-4959-871b-e337292224ae"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PhaseUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""441267b5-37f1-4c59-8b66-5d701503f397"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PhaseUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0668c62e-da6c-466b-b5c2-d29875b77509"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PhaseDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98456aab-ede0-43e8-bd7f-6860e3d234c2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PhaseDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""826051e2-69ae-4a9e-a7af-a6262afadb06"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PhaseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Journal"",
            ""id"": ""2a902766-d516-41d8-a911-690dc1c218a5"",
            ""actions"": [
                {
                    ""name"": ""JournalMenu"",
                    ""type"": ""Button"",
                    ""id"": ""8eec61f3-48ef-45a7-917b-3adbcd348fb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8dbd0c00-4857-40f0-a3b0-1dabf7556477"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JournalMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_PullSlotMachine = m_Player.FindAction("PullSlotMachine", throwIfNotFound: true);
        // Phaser
        m_Phaser = asset.FindActionMap("Phaser", throwIfNotFound: true);
        m_Phaser_PhaseUp = m_Phaser.FindAction("PhaseUp", throwIfNotFound: true);
        m_Phaser_PhaseDown = m_Phaser.FindAction("PhaseDown", throwIfNotFound: true);
        m_Phaser_PhaseMenu = m_Phaser.FindAction("PhaseMenu", throwIfNotFound: true);
        // Journal
        m_Journal = asset.FindActionMap("Journal", throwIfNotFound: true);
        m_Journal_JournalMenu = m_Journal.FindAction("JournalMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_PullSlotMachine;
    public struct PlayerActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @PullSlotMachine => m_Wrapper.m_Player_PullSlotMachine;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @PullSlotMachine.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPullSlotMachine;
                @PullSlotMachine.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPullSlotMachine;
                @PullSlotMachine.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPullSlotMachine;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @PullSlotMachine.started += instance.OnPullSlotMachine;
                @PullSlotMachine.performed += instance.OnPullSlotMachine;
                @PullSlotMachine.canceled += instance.OnPullSlotMachine;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Phaser
    private readonly InputActionMap m_Phaser;
    private IPhaserActions m_PhaserActionsCallbackInterface;
    private readonly InputAction m_Phaser_PhaseUp;
    private readonly InputAction m_Phaser_PhaseDown;
    private readonly InputAction m_Phaser_PhaseMenu;
    public struct PhaserActions
    {
        private @PlayerControl m_Wrapper;
        public PhaserActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @PhaseUp => m_Wrapper.m_Phaser_PhaseUp;
        public InputAction @PhaseDown => m_Wrapper.m_Phaser_PhaseDown;
        public InputAction @PhaseMenu => m_Wrapper.m_Phaser_PhaseMenu;
        public InputActionMap Get() { return m_Wrapper.m_Phaser; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PhaserActions set) { return set.Get(); }
        public void SetCallbacks(IPhaserActions instance)
        {
            if (m_Wrapper.m_PhaserActionsCallbackInterface != null)
            {
                @PhaseUp.started -= m_Wrapper.m_PhaserActionsCallbackInterface.OnPhaseUp;
                @PhaseUp.performed -= m_Wrapper.m_PhaserActionsCallbackInterface.OnPhaseUp;
                @PhaseUp.canceled -= m_Wrapper.m_PhaserActionsCallbackInterface.OnPhaseUp;
                @PhaseDown.started -= m_Wrapper.m_PhaserActionsCallbackInterface.OnPhaseDown;
                @PhaseDown.performed -= m_Wrapper.m_PhaserActionsCallbackInterface.OnPhaseDown;
                @PhaseDown.canceled -= m_Wrapper.m_PhaserActionsCallbackInterface.OnPhaseDown;
                @PhaseMenu.started -= m_Wrapper.m_PhaserActionsCallbackInterface.OnPhaseMenu;
                @PhaseMenu.performed -= m_Wrapper.m_PhaserActionsCallbackInterface.OnPhaseMenu;
                @PhaseMenu.canceled -= m_Wrapper.m_PhaserActionsCallbackInterface.OnPhaseMenu;
            }
            m_Wrapper.m_PhaserActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PhaseUp.started += instance.OnPhaseUp;
                @PhaseUp.performed += instance.OnPhaseUp;
                @PhaseUp.canceled += instance.OnPhaseUp;
                @PhaseDown.started += instance.OnPhaseDown;
                @PhaseDown.performed += instance.OnPhaseDown;
                @PhaseDown.canceled += instance.OnPhaseDown;
                @PhaseMenu.started += instance.OnPhaseMenu;
                @PhaseMenu.performed += instance.OnPhaseMenu;
                @PhaseMenu.canceled += instance.OnPhaseMenu;
            }
        }
    }
    public PhaserActions @Phaser => new PhaserActions(this);

    // Journal
    private readonly InputActionMap m_Journal;
    private IJournalActions m_JournalActionsCallbackInterface;
    private readonly InputAction m_Journal_JournalMenu;
    public struct JournalActions
    {
        private @PlayerControl m_Wrapper;
        public JournalActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @JournalMenu => m_Wrapper.m_Journal_JournalMenu;
        public InputActionMap Get() { return m_Wrapper.m_Journal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JournalActions set) { return set.Get(); }
        public void SetCallbacks(IJournalActions instance)
        {
            if (m_Wrapper.m_JournalActionsCallbackInterface != null)
            {
                @JournalMenu.started -= m_Wrapper.m_JournalActionsCallbackInterface.OnJournalMenu;
                @JournalMenu.performed -= m_Wrapper.m_JournalActionsCallbackInterface.OnJournalMenu;
                @JournalMenu.canceled -= m_Wrapper.m_JournalActionsCallbackInterface.OnJournalMenu;
            }
            m_Wrapper.m_JournalActionsCallbackInterface = instance;
            if (instance != null)
            {
                @JournalMenu.started += instance.OnJournalMenu;
                @JournalMenu.performed += instance.OnJournalMenu;
                @JournalMenu.canceled += instance.OnJournalMenu;
            }
        }
    }
    public JournalActions @Journal => new JournalActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPullSlotMachine(InputAction.CallbackContext context);
    }
    public interface IPhaserActions
    {
        void OnPhaseUp(InputAction.CallbackContext context);
        void OnPhaseDown(InputAction.CallbackContext context);
        void OnPhaseMenu(InputAction.CallbackContext context);
    }
    public interface IJournalActions
    {
        void OnJournalMenu(InputAction.CallbackContext context);
    }
}
